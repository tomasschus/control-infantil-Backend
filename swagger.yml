swagger: "2.0"
info:
  description: "This is a sample server DigiControl server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger DigiControl.com"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:4000"
basePath: "/api"
tags:
- name: "/api/children"
  description: "Everything about your Children"
- name: "/api/info"
  description: "Everything about Home info"
- name: "/api/users"
  description: "Everything about Users"
- name: "/api/notifications"
  description: "Everything about Notifications"
schemes:
- "http"
paths:
  /children:
    post:
      tags:
      - "/api/children"
      summary: "Add a new child to the family"
      description: ""
      operationId: "addChild"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Child object that needs to be added to the family"
        required: true
        schema:
          $ref: "#/definitions/Child"
      responses:
        "200":
          description: "Succesfully Created Child"
        "400":
          description: "User Creation was Unsuccesfull"
        "405":
          description: "Invalid input"
    put:
      tags:
      - "/api/children"
      summary: "Update an existing child"
      description: ""
      operationId: "updatePet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Child object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Child"
      responses:
        "200":
          description: "Succesfully Updated Child"
        "404":
          description: "Name be present"
        "405":
          description: "Error occured while updating the Child"
  /children/{id}:
    delete:
      tags:
      - "/api/children"
      summary: "Deletes a child"
      description: ""
      operationId: "deleteChild"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Child id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Succesfully Deleted"
        "404":
          description: "Child Could not be deleted"
  /children/test:
    get:
      tags:
      - "/api/children"
      summary: "Path deprecated"
      description: "Path for testing"
      operationId: "childrenTest"
      responses:
        "200":
          description: "Llegaste a la ruta de api/child.route"
      deprecated: true
  /info:
    get:
      tags:
      - "/api/info"
      summary: "Get all Info contents"
      description: "Filter is required"
      operationId: "getInfo"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "type"
        in: "query"
        description: "Type for filtering data"
        required: true
        type: "string"
        enum:
          - info
          - news
      responses:
        "200":
          description: "Succesfully Info Recieved"
    post:
      tags:
      - "/api/info"
      summary: "Add a new content in Home"
      description: ""
      operationId: "addInfo"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Content object to include in Home page"
        required: true
        schema:
          $ref: "#/definitions/Content"
      responses:
        "200":
          description: "Succesfully Created Info"
        "400":
          description: "Info Creation was Unsuccesfull"
  /info/{id}:
    delete:
      tags:
      - "/api/info"
      summary: "Deletes a content"
      description: ""
      operationId: "deleteInfo"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Content id to remove"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Succesfully Info Deleted"
        "404":
          description: "Info Could not be deleted"
  /info/test:
    get:
      tags:
      - "/api/info"
      summary: "Path deprecated"
      description: "Path for testing"
      operationId: "infoTest"
      responses:
        "200":
          description: "Llegaste a la ruta de api/info.route"
      deprecated: true
  /users:
    get:
      tags:
      - "/api/users"
      summary: "Get all users"
      description: "Filter is not required"
      operationId: "getAll"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        default:
          description: "successful operation"
    post:
      tags:
      - "/api/users"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/UserCreate"
      responses:
        default:
          description: "Succesfully Created User"
    put:
      tags:
      - "/api/users"
      summary: "Update user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/UserCreate"
      responses:
        "200":
          description: "Succesfully Updated User"
        "400":
          description: "Invalid user supplied"
        "404":
          description: "Error occured while Finding the User"
  /users/{id}:
    delete:
      tags:
      - "/api/users"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id user to delete"
        required: true
        type: "string"
      responses:
        "200":
          description: "Succesfully Deleted"
        "404":
          description: "User Could not be deleted"
  /users/test:
    get:
      tags:
      - "/api/users"
      summary: "Path deprecated"
      description: "Path for testing"
      operationId: "userTest"
      responses:
        "200":
          description: "Llegaste a la ruta de api/user.route"
      deprecated: true
  /users/login:
    post:
      tags:
      - "/api/users"
      summary: "Logs user into the system"
      description: ""
      operationId: "login"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/UserLogin"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "string"
        "400":
          description: "Invalid username or password"
  /users/logout:
    get:
      tags:
      - "/api/users"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /users/userByMail:
    post:
      tags:
      - "/api/users"
      summary: "Get user by mail"
      description: ""
      operationId: "userByMail"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/UserMail"
      responses:
        "200":
          description: "Succesfully Users Recieve"
          schema:
            type: "string"
        "400":
          description: "Invalid username or password"
        "404":
          description: "Error while Paginating Users"
  /notifications/send:
    post:
      tags:
      - "/api/notifications"
      summary: "Send notification"
      description: "This can only be done automaticaly when the user is logged and a new account was created."
      operationId: "send"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Notify by email to user"
        required: true
        schema:
          $ref: "#/definitions/Notification"
      responses:
        "200":
          description: "Succesfully Notification sent"
        "400":
          description: "Field is required"
  /notifications/test:
    get:
      tags:
      - "/api/notifications"
      summary: "Path deprecated"
      description: "Path for testing"
      operationId: "notificationTest"
      responses:
        "200":
          description: "Llegaste a la ruta de api/notification.route"
      deprecated: true
definitions:
  Child:
    type: "object"
    properties:
      name:
        type: "string"
      surname:
        type: "string"
      imageName:
        type: "string"
      bloodType:
        type: "string"
      birthday:
        type: "string"
      gender:
        type: "string"
      notes:
        type: "string"
    xml:
      name: "Child"
  UserLogin:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "UserLogin"
  UserCreate:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "UserCreate"
  UserMail:
    type: "object"
    properties:
      email:
        type: "string"
    xml:
      name: "UserMail"
  Notification:
    properties:
      action:
        type: "string"
        enum:
          - create
          - delete
      email:
        type: "string"
    xml:
      name: "Notification"
  Content:
    properties:
      type:
        type: "string"
        enum:
          - info
          - news
      title:
        type: "string"
      description:
        type: "string"
      imgUrl:
        type: "string"
      button:
        type: "string"
    xml:
      name: "Content"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"